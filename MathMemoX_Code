#include <Keypad.h>
#include <LiquidCrystal.h>

// Initialize the LCD
LiquidCrystal lcd(13, 12, 11, 10, 9, 8);

// Keypad setup
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'}, // 'A' will be used to indicate negative sign
  {'4', '5', '6', 'B'}, // 'B' to pause the game
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {7, 6, 5, 4};
byte colPins[COLS] = {3, 2, 1, 0};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

int level = 1; // Level: 1 = Beginner, 2 = Medium, 3 = Hard, 4 = Advanced
int roundNumber = 1;
const int maxRounds = 3;
int numCount = 5; // Number of numbers to display
int numbers[5];
int userAnswer = 0;
char operation;
char key;
bool isNegative = false; // Track if the number is negative
int score = 0;

void setup() {
  lcd.begin(16, 2);
  randomSeed(analogRead(0));
  welcomeMessage();
  delay(2000);
  chooseDifficulty();
}

void loop() {
  key = keypad.getKey();

  if (key) {
    if (key >= '0' && key <= '9') {
      userAnswer = userAnswer * 10 + (key - '0');
      lcd.setCursor(0, 1);
      lcd.print(userAnswer);
    } else if (key == '#') { // Enter key to submit answer
      checkAnswer();
    } else if (key == '*') { // Clear key
      userAnswer = 0;
      isNegative = false;
      lcd.setCursor(0, 1);
      lcd.print("                ");
      lcd.setCursor(0, 1);
    } else if (key == 'A') { // Use 'A' for negative sign
      isNegative = !isNegative; // Toggle negative state
      lcd.setCursor(0, 1);
      if (isNegative) {
        lcd.print("-");
      } else {
        lcd.print(" ");
      }
    } else if (key == 'B') { // Pause the game
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Game Paused");
      delay(3000); // Pause duration
      startGame();
    }
  }
}

void welcomeMessage() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Welcome to");
  lcd.setCursor(0, 1);
  lcd.print("MathMemoX!");
}

void chooseDifficulty() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Select Level:");
  lcd.setCursor(0, 1);
  lcd.print("1=B 2=M 3=H 4=A");

  while (true) {
    key = keypad.getKey();
    if (key == '1') {
      level = 1; // Beginner
      break;
    } else if (key == '2') {
      level = 2; // Medium
      break;
    } else if (key == '3') {
      level = 3; // Hard
      break;
    } else if (key == '4') {
      level = 4; // Advanced
      break;
    }
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  if (level == 1) {
    lcd.print("Beginner Level");
    lcd.setCursor(0, 1);
    lcd.print("1-9 numbers");
  } else if (level == 2) {
    lcd.print("Medium Level");
    lcd.setCursor(0, 1);
    lcd.print("10-99 numbers");
  } else if (level == 3) {
    lcd.print("Hard Level");
    lcd.setCursor(0, 1);
    lcd.print("10-99 numbers");
  } else {
    lcd.print("Advanced Level");
    lcd.setCursor(0, 1);
    lcd.print("100-999 numbers");
  }
  delay(2000);
  startGame();
}

void startGame() {
  lcd.clear();
  lcd.setCursor(0, 0);
  operation = selectOperation();
  if (operation == '+') {
    lcd.print("Add the numbers");
  } else if (operation == '-') {
    lcd.print("Subtract numbers");
  }

  displayNumbers();
}

char selectOperation() {
  int op = random(2); // 0 = addition, 1 = subtraction
  if (op == 0) return '+';
  else return '-';
}

void displayNumbers() {
  int displayTime = 5000 / (roundNumber * level); // Decrease time with higher levels and rounds
  for (int i = 0; i < numCount; i++) {
    if (level == 1) { // Beginner: 1 to 9
      numbers[i] = random(1, 10);
    } else if (level == 2) { // Medium: 10 to 99
      numbers[i] = random(10, 100);
    } else if (level == 3) { // Hard: 10 to 99
      numbers[i] = random(10, 100);
    } else { // Advanced: 100 to 999
      numbers[i] = random(100, 1000);
    }
    lcd.setCursor(0, 1);
    lcd.print(numbers[i]);
    delay(displayTime);
    lcd.clear();
    lcd.setCursor(0, 0);
  }
  userAnswer = 0;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Enter result:");
  lcd.setCursor(0, 1);
}

void checkAnswer() {
  int correctAnswer = 0;
  if (operation == '+') {
    for (int i = 0; i < numCount; i++) correctAnswer += numbers[i];
  } else if (operation == '-') {
    correctAnswer = numbers[0];
    for (int i = 1; i < numCount; i++) correctAnswer -= numbers[i];
  }

  if (isNegative) {
    userAnswer = -userAnswer;
  }

  lcd.setCursor(0, 1);
  if (userAnswer == correctAnswer) {
    lcd.print("Correct!");
    score += 10; // Add points for correct answer
    delay(2000);
    nextRound();
  } else {
    lcd.print("Wrong! Ret: #");
    lcd.setCursor(0, 1);
    lcd.print("Skip: *");
    handleRetryOrSkip();
  }
}

void handleRetryOrSkip() {
  while (true) {
    key = keypad.getKey();
    if (key == '#') { // Retry from the start of the current level
      roundNumber = 1;
      delay(2000);
      startGame();
      break;
    } else if (key == '*') { // Skip to next round
      nextRound();
      break;
    }
  }
}

void nextRound() {
  roundNumber++;
  if (roundNumber > maxRounds) {
    roundNumber = 1;
    levelUp();
  }
  delay(2000);
  startGame();
}

void levelUp() {
  level++;
  if (level > 4) {
    endGameSummary();
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Level Up!");
    lcd.setCursor(0, 1);
    lcd.print("Level: ");
    lcd.print(level);
    delay(2000);
  }
}

void endGameSummary() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("You won!");
  delay(3000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Final Score: ");
  lcd.print(score);
  delay(3000);
  welcomeMessage();
  delay(2000);
  score = 0; // Reset score for a new game
}

void encouragementMessage() {
  lcd.clear();
  lcd.setCursor(0, 0);
  if (score >= 100) {
    lcd.print("Great Job!");
  } else if (score >= 50) {
    lcd.print("Keep Going!");
  } else {
    lcd.print("You can do it!");
  }
  delay(2000);
}
