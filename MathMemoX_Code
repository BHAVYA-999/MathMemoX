#include <Keypad.h>
#include <LiquidCrystal.h>

LiquidCrystal lcd(13, 12, 11, 10, 9, 8);

const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {7, 6, 5, 4};
byte colPins[COLS] = {3, 2, 1, 0};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

int level = 1;
int roundNumber = 1;
const int maxRounds = 3;
int numCount = 5;
int numbers[5];
int userAnswer = 0;
char operation;
char key;
bool isNegative = false;
int score = 0;

void setup() {
  lcd.begin(16, 2);
  randomSeed(analogRead(0));
  welcomeMessage();
  delay(2000);
  chooseDifficulty();
}

void loop() {
  key = keypad.getKey();
  if (key) {
    if (key >= '0' && key <= '9') {
      userAnswer = userAnswer * 10 + (key - '0');
      lcd.setCursor(0, 1);
      lcd.print(userAnswer);
    } else if (key == '#') {
      checkAnswer();
    } else if (key == '*') {
      userAnswer = 0;
      isNegative = false;
      lcd.setCursor(0, 1);
      lcd.print("                ");
      lcd.setCursor(0, 1);
    } else if (key == 'A') {
      isNegative = !isNegative;
      lcd.setCursor(0, 1);
      if (isNegative) {
        lcd.print("-");
      } else {
        lcd.print(" ");
      }
    } else if (key == 'B') {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Game Paused");
      delay(3000);
      startGame();
    }
  }
}

void welcomeMessage() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Welcome to");
  lcd.setCursor(0, 1);
  lcd.print("MathMemoX!");
}

void chooseDifficulty() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Select Level:");
  lcd.setCursor(0, 1);
  lcd.print("1=B 2=M 3=H 4=A");

  while (true) {
    key = keypad.getKey();
    if (key == '1') {
      level = 1;
      break;
    } else if (key == '2') {
      level = 2;
      break;
    } else if (key == '3') {
      level = 3;
      break;
    } else if (key == '4') {
      level = 4;
      break;
    }
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  if (level == 1) {
    lcd.print("Beginner Level");
    lcd.setCursor(0, 1);
    lcd.print("1-9 numbers");
  } else if (level == 2) {
    lcd.print("Medium Level");
    lcd.setCursor(0, 1);
    lcd.print("10-99 numbers");
  } else if (level == 3) {
    lcd.print("Hard Level");
    lcd.setCursor(0, 1);
    lcd.print("10-99 numbers");
  } else {
    lcd.print("Advanced Level");
    lcd.setCursor(0, 1);
    lcd.print("100-999 numbers");
  }
  delay(2000);
  startGame();
}

void startGame() {
  lcd.clear();
  lcd.setCursor(0, 0);
  operation = selectOperation();
  if (operation == '+') {
    lcd.print("Add the numbers");
  } else if (operation == '-') {
    lcd.print("Subtract numbers");
  }
  displayNumbers();
}

char selectOperation() {
  int op = random(2);
  return op == 0 ? '+' : '-';
}

void displayNumbers() {
  int displayTime = 5000 / (roundNumber * level);
  for (int i = 0; i < numCount; i++) {
    int newNumber;
    bool unique;
    do {
      unique = true;
      if (level == 1) {
        newNumber = random(1, 10);
      } else if (level == 2 || level == 3) {
        newNumber = random(10, 100);
      } else {
        newNumber = random(100, 1000);
      }
      for (int j = 0; j < i; j++) {
        if (numbers[j] == newNumber) {
          unique = false;
          break;
        }
      }
    } while (!unique);

    numbers[i] = newNumber;

    lcd.setCursor(0, 1);
    lcd.print(numbers[i]);
    delay(displayTime / 2);  // Show the number for half the display time

    for (int blink = 0; blink < 2; blink++) { // Blink the number twice
      lcd.setCursor(0, 1);
      lcd.print("    ");
      delay(level == 1 ? displayTime / 8 : displayTime / (4 * level)); // Adjust blink speed for beginner level
      lcd.setCursor(0, 1);
      lcd.print(numbers[i]);
      delay(level == 1 ? displayTime / 2 : displayTime / (4 * level)); // Adjust blink speed for beginner level
    }

    lcd.clear();
    delay(1000);  // Blank screen for a second before showing the next number
    lcd.setCursor(0, 0);
  }
  userAnswer = 0;
  isNegative = false; // Reset isNegative at the start of each round
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Enter result:");
  lcd.setCursor(0, 1);
}

void checkAnswer() {
  int correctAnswer = 0;
  if (operation == '+') {
    for (int i = 0; i < numCount; i++) correctAnswer += numbers[i];
  } else if (operation == '-') {
    correctAnswer = numbers[0];
    for (int i = 1; i < numCount; i++) correctAnswer -= numbers[i];
    if (correctAnswer < 0) {
      correctAnswer = -correctAnswer; // Ensure the answer is never negative
    }
  }

  if (isNegative) {
    userAnswer = -userAnswer;
  }

  lcd.setCursor(0, 1);
  if (userAnswer == correctAnswer) {
    lcd.print("Correct!");
    score += 10;
    delay(2000);
    nextRound();
  } else {
    lcd.print("Wrong! Ret: #");
    lcd.setCursor(0, 1);
    lcd.print("Skip: *");
    handleRetryOrSkip();
  }
}

void handleRetryOrSkip() {
  while (true) {
    key = keypad.getKey();
    if (key == '#') {
      roundNumber = 1;
      delay(2000);
      startGame();
      break;
    } else if (key == '*') {
      nextRound();
      break;
    }
  }
}

void nextRound() {
  roundNumber++;
  if (roundNumber > maxRounds) {
    roundNumber = 1;
    levelUp();
  }
  delay(2000);
  startGame();
}

void levelUp() {
  level++;
  if (level > 4) {
    endGameSummary();
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Level Up!");
    lcd.setCursor(0, 1);
    lcd.print("Level: ");
    lcd.print(level);
    delay(2000);
  }
}

void endGameSummary() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("You won!");
  delay(3000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Final Score: ");
  lcd.print(score);
  delay(3000);
  welcomeMessage();
  delay(2000);
  score = 0;
}

void encouragementMessage() {
  lcd.clear();
  lcd.setCursor(0, 0);
  if (score >= 100) {
    lcd.print("Great Job!");
  } else if (score >= 50) {
    lcd.print("Keep Going!");
  } else {
    lcd.print("You can do it!");
  }
  delay(2000);
}
